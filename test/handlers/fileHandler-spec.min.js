let assert=require("assert"),expect=require("chai").expect,sinon=require("sinon"),file=require("/home/swr/git/nginx-httpapi/lib/handlers/fileHandler.js");describe("fileHandler class",()=>{describe("fileHandler readConfig function",()=>{it("should read nginx conf file",async()=>{try{let e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf");expect(e).to.not.be.null}catch(e){console.error(e),assert(!1)}}),it("should read in as containing more than 1 character",async()=>{try{let e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf");expect(e.length).to.be.above(0)}catch(e){console.error(e),assert(!1)}})}),describe("fileHandler writeConfig function",()=>{it("should return true for a write operation",async()=>{try{let e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf"),t=await file.writeConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test",e);expect(t).to.not.be.null}catch(e){console.error(e),assert(!1)}}),it('should read in a value of "nginx"',async()=>{try{let e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.match(/nginx/)}catch(e){console.error(e),assert(!1)}})}),describe("checkExists function",()=>{it("should return ENOENT if file does not exist",async()=>{let e=await file.checkExists("/somefile");expect(e).to.eql("ENOENT")}),it("should return 1 if file exists",async()=>{let e=await file.checkExists("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.eql(1)})}),describe("checkPermissions function",()=>{it("should return error for --x",async()=>{let e=await file.checkPermissions("/home/swr/git/nginx-httpapi/test/res/perm.conf");expect(e).to.eql("EACCES")}),it("should return 1 for rw- permissions",async()=>{let e=await file.checkPermissions("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.eql(1)})}),describe("fixPermissions function",()=>{it("should successfully change permissions",async()=>{let e=await file.fixPermissions("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.eql(1)})}),describe("checkPermissions function",()=>{it("should return 1 if permissions are correct",async()=>{let e=await file.checkOwner("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.eql(1)}),it("should return 0 if permissions are incorrect",async()=>{let e=await file.checkOwner("/home/swr/git/nginx-httpapi/test/res/perm.conf");expect(e).to.eql(0)})}),describe("checkCRC function",()=>{it("should return success for matched CRC",async()=>{let e=await file.checkCRC("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.eql(1)}),it("should return an error for unmatched CRC",async()=>{let e=await file.checkCRC("/home/swr/git/nginx-httpapi/test/res/nginx.conf");expect(e).to.eql(0)})}),describe("setCRC function",()=>{it("should sucessfully calculate and write crc",async()=>{let e=await file.setCRC("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.eql(1)})})});