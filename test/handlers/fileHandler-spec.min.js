const assert=require("assert"),expect=require("chai").expect,sinon=require("sinon"),file=require("/home/swr/git/nginx-httpapi/lib/handlers/fileHandler.js");describe("fileHandler readConfig function",()=>{it("should read nginx conf file",async()=>{try{const e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf");expect(e).to.not.be.null}catch(e){console.error(e),assert(!1)}}),it("should read in as containing more than 1 character",async()=>{try{const e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf");expect(e.length).to.be.above(0)}catch(e){console.error(e),assert(!1)}})}),describe("fileHandler writeConfig function",()=>{it("should return true for a write operation",async()=>{try{const e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf"),t=await file.writeConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test",e);expect(t).to.not.be.null}catch(e){console.error(e),assert(!1)}}),it('should read in a value of "nginx"',async()=>{try{const e=await file.readConfig("/home/swr/git/nginx-httpapi/test/res/nginx.conf.test");expect(e).to.match(/nginx/)}catch(e){console.error(e),assert(!1)}})});