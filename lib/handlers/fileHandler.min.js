"use strict";class fileHandler{constructor(){this.fs=require("fs"),this.util=require("util"),this.crc=require("crc"),this.fs.readFile=this.util.promisify(this.fs.readFile),this.fs.writeFile=this.util.promisify(this.fs.writeFile),this.fs.writeFile=this.util.promisify(this.fs.writeFile),this.fs.access=this.util.promisify(this.fs.access),this.fs.stat=this.util.promisify(this.fs.stat),this.fs.chmod=this.util.promisify(this.fs.chmod),this.fs.chown=this.util.promisify(this.fs.chown),this.DEBUG=global.DEBUG?1:0}async readConfig(t,r){try{var s=await this.fs.readFile(t,"utf8");return void 0!==global.LOGLEVEL&&5===global.LOGLEVEL&&console.log((new Date).toISOString()+" File read successfully."),this.DEBUG&&console.log(s),r&&r(s),s}catch(t){console.error((new Date).toISOString()+t)}}async writeConfig(t,r,s){try{return await this.fs.writeFile(t,r),void 0!==global.LOGLEVEL&&5===global.LOGLEVEL&&console.log((new Date).toISOString()+" File written successfully."),s&&s(1),1}catch(t){console.error((new Date).toISOString()+t)}}async checkExists(t){try{await this.fs.stat(t);return 1}catch(t){return console.error((new Date).toISOString()+t),t.code}}async checkPermissions(t){try{await this.fs.access(t,this.fs.constants.R_OK|this.fs.constants.W_OK);return 1}catch(t){return console.error((new Date).toISOString()+t),t.code}}async fixPermissions(t){try{return await this.fs.chmod(t,"644"),1}catch(t){return console.error((new Date).toISOString()+t),t.code}}async checkOwner(t){try{let r=process.getuid(),s=process.getgid(),e=await this.fs.stat(t);return e.uid===r&&e.gid===s?1:0}catch(t){return console.error((new Date).toISOString()+t),t.code}}async fixOwner(t){try{return await this.fs.chown(t,process.getuid(),process.getgid()),1}catch(t){return console.error((new Date).toISOString()+t),t.code}}async checkCRC(t){try{return await this.readConfig(t+".crc")===this.crc.crc32(await this.readConfig(t)).toString(16)?1:0}catch(t){return console.error((new Date).toISOString()+t),t.code}}async setCRC(t){try{var r=this.crc.crc32(await this.readConfig(t)).toString(16);return await this.writeConfig(t+".crc",r),1}catch(t){return console.error((new Date).toISOString()+t),t.code}}}const handler=new fileHandler;Object.freeze(handler),module.exports=handler;